// Generated by gencpp from file dynamo_planner/custom_states_msgs.msg
// DO NOT EDIT!


#ifndef DYNAMO_PLANNER_MESSAGE_CUSTOM_STATES_MSGS_H
#define DYNAMO_PLANNER_MESSAGE_CUSTOM_STATES_MSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dynamo_planner
{
template <class ContainerAllocator>
struct custom_states_msgs_
{
  typedef custom_states_msgs_<ContainerAllocator> Type;

  custom_states_msgs_()
    : x(0.0)
    , y(0.0)
    , yaw(0.0)
    , controlA(0.0)
    , controlB(0.0)
    , control(0.0)
    , controlYAW(0.0)
    , duration(0.0)
    , pre_x(0.0)
    , pre_y(0.0)
    , pre_yaw(0.0)
    , pre_controlA(0.0)
    , pre_controlB(0.0)
    , flag(false)
    , sub_flag(false)
    , index(0)  {
    }
  custom_states_msgs_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , yaw(0.0)
    , controlA(0.0)
    , controlB(0.0)
    , control(0.0)
    , controlYAW(0.0)
    , duration(0.0)
    , pre_x(0.0)
    , pre_y(0.0)
    , pre_yaw(0.0)
    , pre_controlA(0.0)
    , pre_controlB(0.0)
    , flag(false)
    , sub_flag(false)
    , index(0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _controlA_type;
  _controlA_type controlA;

   typedef double _controlB_type;
  _controlB_type controlB;

   typedef double _control_type;
  _control_type control;

   typedef double _controlYAW_type;
  _controlYAW_type controlYAW;

   typedef double _duration_type;
  _duration_type duration;

   typedef double _pre_x_type;
  _pre_x_type pre_x;

   typedef double _pre_y_type;
  _pre_y_type pre_y;

   typedef double _pre_yaw_type;
  _pre_yaw_type pre_yaw;

   typedef double _pre_controlA_type;
  _pre_controlA_type pre_controlA;

   typedef double _pre_controlB_type;
  _pre_controlB_type pre_controlB;

   typedef uint8_t _flag_type;
  _flag_type flag;

   typedef uint8_t _sub_flag_type;
  _sub_flag_type sub_flag;

   typedef int8_t _index_type;
  _index_type index;





  typedef boost::shared_ptr< ::dynamo_planner::custom_states_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamo_planner::custom_states_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct custom_states_msgs_

typedef ::dynamo_planner::custom_states_msgs_<std::allocator<void> > custom_states_msgs;

typedef boost::shared_ptr< ::dynamo_planner::custom_states_msgs > custom_states_msgsPtr;
typedef boost::shared_ptr< ::dynamo_planner::custom_states_msgs const> custom_states_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamo_planner::custom_states_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamo_planner::custom_states_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dynamo_planner::custom_states_msgs_<ContainerAllocator1> & lhs, const ::dynamo_planner::custom_states_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.yaw == rhs.yaw &&
    lhs.controlA == rhs.controlA &&
    lhs.controlB == rhs.controlB &&
    lhs.control == rhs.control &&
    lhs.controlYAW == rhs.controlYAW &&
    lhs.duration == rhs.duration &&
    lhs.pre_x == rhs.pre_x &&
    lhs.pre_y == rhs.pre_y &&
    lhs.pre_yaw == rhs.pre_yaw &&
    lhs.pre_controlA == rhs.pre_controlA &&
    lhs.pre_controlB == rhs.pre_controlB &&
    lhs.flag == rhs.flag &&
    lhs.sub_flag == rhs.sub_flag &&
    lhs.index == rhs.index;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dynamo_planner::custom_states_msgs_<ContainerAllocator1> & lhs, const ::dynamo_planner::custom_states_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dynamo_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dynamo_planner::custom_states_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamo_planner::custom_states_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamo_planner::custom_states_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamo_planner::custom_states_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamo_planner::custom_states_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamo_planner::custom_states_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamo_planner::custom_states_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "687ab8d67518730041fc3c6e12a166b7";
  }

  static const char* value(const ::dynamo_planner::custom_states_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x687ab8d675187300ULL;
  static const uint64_t static_value2 = 0x41fc3c6e12a166b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamo_planner::custom_states_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamo_planner/custom_states_msgs";
  }

  static const char* value(const ::dynamo_planner::custom_states_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamo_planner::custom_states_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# double type x y yaw control duration\n"
"float64 x\n"
"float64 y\n"
"float64 yaw\n"
"\n"
"float64 controlA\n"
"float64 controlB\n"
"float64 control\n"
"float64 controlYAW\n"
"\n"
"float64 duration\n"
"\n"
"float64 pre_x\n"
"float64 pre_y\n"
"float64 pre_yaw\n"
"float64 pre_controlA\n"
"float64 pre_controlB\n"
"\n"
"bool flag\n"
"bool sub_flag\n"
"\n"
"int8 index\n"
;
  }

  static const char* value(const ::dynamo_planner::custom_states_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamo_planner::custom_states_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.yaw);
      stream.next(m.controlA);
      stream.next(m.controlB);
      stream.next(m.control);
      stream.next(m.controlYAW);
      stream.next(m.duration);
      stream.next(m.pre_x);
      stream.next(m.pre_y);
      stream.next(m.pre_yaw);
      stream.next(m.pre_controlA);
      stream.next(m.pre_controlB);
      stream.next(m.flag);
      stream.next(m.sub_flag);
      stream.next(m.index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct custom_states_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamo_planner::custom_states_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamo_planner::custom_states_msgs_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "controlA: ";
    Printer<double>::stream(s, indent + "  ", v.controlA);
    s << indent << "controlB: ";
    Printer<double>::stream(s, indent + "  ", v.controlB);
    s << indent << "control: ";
    Printer<double>::stream(s, indent + "  ", v.control);
    s << indent << "controlYAW: ";
    Printer<double>::stream(s, indent + "  ", v.controlYAW);
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
    s << indent << "pre_x: ";
    Printer<double>::stream(s, indent + "  ", v.pre_x);
    s << indent << "pre_y: ";
    Printer<double>::stream(s, indent + "  ", v.pre_y);
    s << indent << "pre_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.pre_yaw);
    s << indent << "pre_controlA: ";
    Printer<double>::stream(s, indent + "  ", v.pre_controlA);
    s << indent << "pre_controlB: ";
    Printer<double>::stream(s, indent + "  ", v.pre_controlB);
    s << indent << "flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag);
    s << indent << "sub_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sub_flag);
    s << indent << "index: ";
    Printer<int8_t>::stream(s, indent + "  ", v.index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMO_PLANNER_MESSAGE_CUSTOM_STATES_MSGS_H
