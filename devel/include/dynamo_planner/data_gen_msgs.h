// Generated by gencpp from file dynamo_planner/data_gen_msgs.msg
// DO NOT EDIT!


#ifndef DYNAMO_PLANNER_MESSAGE_DATA_GEN_MSGS_H
#define DYNAMO_PLANNER_MESSAGE_DATA_GEN_MSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dynamo_planner
{
template <class ContainerAllocator>
struct data_gen_msgs_
{
  typedef data_gen_msgs_<ContainerAllocator> Type;

  data_gen_msgs_()
    : flag(false)
    , filename()
    , num_data(0.0)  {
    }
  data_gen_msgs_(const ContainerAllocator& _alloc)
    : flag(false)
    , filename(_alloc)
    , num_data(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _flag_type;
  _flag_type flag;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _filename_type;
  _filename_type filename;

   typedef double _num_data_type;
  _num_data_type num_data;





  typedef boost::shared_ptr< ::dynamo_planner::data_gen_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamo_planner::data_gen_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct data_gen_msgs_

typedef ::dynamo_planner::data_gen_msgs_<std::allocator<void> > data_gen_msgs;

typedef boost::shared_ptr< ::dynamo_planner::data_gen_msgs > data_gen_msgsPtr;
typedef boost::shared_ptr< ::dynamo_planner::data_gen_msgs const> data_gen_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamo_planner::data_gen_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamo_planner::data_gen_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dynamo_planner::data_gen_msgs_<ContainerAllocator1> & lhs, const ::dynamo_planner::data_gen_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.flag == rhs.flag &&
    lhs.filename == rhs.filename &&
    lhs.num_data == rhs.num_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dynamo_planner::data_gen_msgs_<ContainerAllocator1> & lhs, const ::dynamo_planner::data_gen_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dynamo_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dynamo_planner::data_gen_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamo_planner::data_gen_msgs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamo_planner::data_gen_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamo_planner::data_gen_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamo_planner::data_gen_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamo_planner::data_gen_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamo_planner::data_gen_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5217da41250023fd463ea99124c27fdc";
  }

  static const char* value(const ::dynamo_planner::data_gen_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5217da41250023fdULL;
  static const uint64_t static_value2 = 0x463ea99124c27fdcULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamo_planner::data_gen_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamo_planner/data_gen_msgs";
  }

  static const char* value(const ::dynamo_planner::data_gen_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamo_planner::data_gen_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# bool flag string filename float64 num_data\n"
"bool flag\n"
"string filename\n"
"float64 num_data\n"
;
  }

  static const char* value(const ::dynamo_planner::data_gen_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamo_planner::data_gen_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flag);
      stream.next(m.filename);
      stream.next(m.num_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct data_gen_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamo_planner::data_gen_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamo_planner::data_gen_msgs_<ContainerAllocator>& v)
  {
    s << indent << "flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag);
    s << indent << "filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.filename);
    s << indent << "num_data: ";
    Printer<double>::stream(s, indent + "  ", v.num_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMO_PLANNER_MESSAGE_DATA_GEN_MSGS_H
