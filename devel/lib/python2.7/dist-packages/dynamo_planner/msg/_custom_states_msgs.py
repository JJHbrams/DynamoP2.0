# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dynamo_planner/custom_states_msgs.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class custom_states_msgs(genpy.Message):
  _md5sum = "3b52bf44a08210bd7d5f8e100b5f756a"
  _type = "dynamo_planner/custom_states_msgs"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# double type x y yaw control duration
float64 x
float64 y
float64 yaw

float64 controlX
float64 controlY
float64 controlYAW

float64 duration

float64 pre_x
float64 pre_y
float64 pre_yaw

bool flag
bool tf_flag

bool diff_x
bool diff_y
bool diff_yaw
"""
  __slots__ = ['x','y','yaw','controlX','controlY','controlYAW','duration','pre_x','pre_y','pre_yaw','flag','tf_flag','diff_x','diff_y','diff_yaw']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,yaw,controlX,controlY,controlYAW,duration,pre_x,pre_y,pre_yaw,flag,tf_flag,diff_x,diff_y,diff_yaw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(custom_states_msgs, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.controlX is None:
        self.controlX = 0.
      if self.controlY is None:
        self.controlY = 0.
      if self.controlYAW is None:
        self.controlYAW = 0.
      if self.duration is None:
        self.duration = 0.
      if self.pre_x is None:
        self.pre_x = 0.
      if self.pre_y is None:
        self.pre_y = 0.
      if self.pre_yaw is None:
        self.pre_yaw = 0.
      if self.flag is None:
        self.flag = False
      if self.tf_flag is None:
        self.tf_flag = False
      if self.diff_x is None:
        self.diff_x = False
      if self.diff_y is None:
        self.diff_y = False
      if self.diff_yaw is None:
        self.diff_yaw = False
    else:
      self.x = 0.
      self.y = 0.
      self.yaw = 0.
      self.controlX = 0.
      self.controlY = 0.
      self.controlYAW = 0.
      self.duration = 0.
      self.pre_x = 0.
      self.pre_y = 0.
      self.pre_yaw = 0.
      self.flag = False
      self.tf_flag = False
      self.diff_x = False
      self.diff_y = False
      self.diff_yaw = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10d5B().pack(_x.x, _x.y, _x.yaw, _x.controlX, _x.controlY, _x.controlYAW, _x.duration, _x.pre_x, _x.pre_y, _x.pre_yaw, _x.flag, _x.tf_flag, _x.diff_x, _x.diff_y, _x.diff_yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 85
      (_x.x, _x.y, _x.yaw, _x.controlX, _x.controlY, _x.controlYAW, _x.duration, _x.pre_x, _x.pre_y, _x.pre_yaw, _x.flag, _x.tf_flag, _x.diff_x, _x.diff_y, _x.diff_yaw,) = _get_struct_10d5B().unpack(str[start:end])
      self.flag = bool(self.flag)
      self.tf_flag = bool(self.tf_flag)
      self.diff_x = bool(self.diff_x)
      self.diff_y = bool(self.diff_y)
      self.diff_yaw = bool(self.diff_yaw)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10d5B().pack(_x.x, _x.y, _x.yaw, _x.controlX, _x.controlY, _x.controlYAW, _x.duration, _x.pre_x, _x.pre_y, _x.pre_yaw, _x.flag, _x.tf_flag, _x.diff_x, _x.diff_y, _x.diff_yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 85
      (_x.x, _x.y, _x.yaw, _x.controlX, _x.controlY, _x.controlYAW, _x.duration, _x.pre_x, _x.pre_y, _x.pre_yaw, _x.flag, _x.tf_flag, _x.diff_x, _x.diff_y, _x.diff_yaw,) = _get_struct_10d5B().unpack(str[start:end])
      self.flag = bool(self.flag)
      self.tf_flag = bool(self.tf_flag)
      self.diff_x = bool(self.diff_x)
      self.diff_y = bool(self.diff_y)
      self.diff_yaw = bool(self.diff_yaw)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10d5B = None
def _get_struct_10d5B():
    global _struct_10d5B
    if _struct_10d5B is None:
        _struct_10d5B = struct.Struct("<10d5B")
    return _struct_10d5B
